<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YingLong</title>
  
  <subtitle>虽奔放不羁，但也自我束缚</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yaoyinglong.github.io/"/>
  <updated>2020-07-07T03:14:46.820Z</updated>
  <id>https://yaoyinglong.github.io/</id>
  
  <author>
    <name>YaoYingLong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HBase依赖冲突</title>
    <link href="https://yaoyinglong.github.io/Blog/%E6%A1%86%E6%9E%B6/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/HBase%E4%BE%9D%E8%B5%96%E5%86%B2%E7%AA%81/"/>
    <id>https://yaoyinglong.github.io/Blog/框架/常见问题/HBase依赖冲突/</id>
    <published>2020-07-05T16:00:00.000Z</published>
    <updated>2020-07-07T03:14:46.820Z</updated>
    
    <content type="html"><![CDATA[<h3 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h3><p>maven依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>连接代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Connection <span class="title">hbaseConnection</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    org.apache.hadoop.conf.Configuration conf = HBaseConfiguration.create();</span><br><span class="line">    conf.set(<span class="string">"hbase.zookeeper.quorum"</span>, <span class="string">"127.0.0.1"</span>);</span><br><span class="line">    conf.set(<span class="string">"hbase.zookeeper.property.clientPort"</span>, <span class="string">"2181"</span>);</span><br><span class="line">    conf.set(<span class="string">"zookeeper.znode.parent"</span>, <span class="string">"/hbase-unsecure"</span>);</span><br><span class="line">    Connection connection = ConnectionFactory.createConnection(conf);</span><br><span class="line">    <span class="keyword">return</span> connection;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">query</span><span class="params">(String tableName, String familyName, String columnName, String qualifier)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    TableName name = TableName.valueOf(tableName);</span><br><span class="line">    Table table = hbaseConnection.getTable(name);</span><br><span class="line">    Get get = <span class="keyword">new</span> Get(qualifier.getBytes());</span><br><span class="line">    get.addColumn(Bytes.toBytes(familyName), Bytes.toBytes(columnName));</span><br><span class="line">    Result rs = table.get(get);</span><br><span class="line">    <span class="keyword">return</span> Bytes.toString(rs.value());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hive依赖包冲突"><a href="#hive依赖包冲突" class="headerlink" title="hive依赖包冲突"></a>hive依赖包冲突</h3><p>在项目中同时存在<code>hive</code>和<code>hbase</code>时，<code>hive</code>中引用的<code>guava</code>与<code>hbase</code>中引用的<code>guava</code>版本冲突，从而导致执行<code>hbase</code>查询时报错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.hadoop.hbase.DoNotRetryIOException: java.lang.IllegalAccessError: tried to access method com.google.common.base.Stopwatch.&lt;init&gt;()V from <span class="class"><span class="keyword">class</span> <span class="title">org</span>.<span class="title">apache</span>.<span class="title">hadoop</span>.<span class="title">hbase</span>.<span class="title">zookeeper</span>.<span class="title">MetaTableLocator</span></span></span><br></pre></td></tr></table></figure><p><code>Stopwatch</code>在<code>google</code>的<code>guava</code>包下，<code>hbase1.1.2</code>只在<code>guava12-16</code>下能正常运行。<code>guava17</code>开始，出现以上异常。尝试着将<code>guava</code>版本降低，后启动项目后报如下错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">An attempt was made to call the method com.google.common.base.Splitter.splitToList(Ljava/lang/CharSequence;)Ljava/lang/List; but it does not exist. Its class, com.google.common.base.Splitter, is available from the following locations:</span><br><span class="line">jar:file:/mvnRespo/org/apache/hive/hive-exec/<span class="number">1.2</span>.1/hive-exec-<span class="number">1.2</span>.1.jar!/com/google/common/base/Splitter.class</span><br><span class="line">    jar:file:/mvnRespo/com/google/guava/guava/<span class="number">16.0</span>/guava-<span class="number">16.0</span>.jar!/com/google/common/base/Splitter.class</span><br></pre></td></tr></table></figure><p>由此可见<code>hive</code>必须依赖高版本的<code>guava</code>才行，然后就尝试着将hbase的依赖版本升级到<code>1.3.0</code>，问题得到了解决。</p><h3 id="tablestore依赖包冲突"><a href="#tablestore依赖包冲突" class="headerlink" title="tablestore依赖包冲突"></a>tablestore依赖包冲突</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(value = <span class="string">"$&#123;aliyun.endpoint:http&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String endPoint;</span><br><span class="line"><span class="meta">@Value</span>(value = <span class="string">"$&#123;aliyun.accessKeyId:test&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String accessKeyId;</span><br><span class="line"><span class="meta">@Value</span>(value = <span class="string">"$&#123;aliyun.accessSecret:test&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String accessSecret;</span><br><span class="line"><span class="meta">@Value</span>(value = <span class="string">"$&#123;aliyun.instanceName:test&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String instanceName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> SyncClient syncClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    syncClient = <span class="keyword">new</span> SyncClient(endPoint, accessKeyId, accessSecret, instanceName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">query</span><span class="params">(String key, String value, String tableName, String columnName)</span> </span>&#123;</span><br><span class="line">    PrimaryKeyBuilder primaryKeyBuilder = PrimaryKeyBuilder.createPrimaryKeyBuilder();</span><br><span class="line">    primaryKeyBuilder.addPrimaryKeyColumn(key, PrimaryKeyValue.fromString(value));</span><br><span class="line">    PrimaryKey primaryKey = primaryKeyBuilder.build();</span><br><span class="line">    GetRowRequest request = <span class="keyword">new</span> GetRowRequest();</span><br><span class="line">    SingleRowQueryCriteria singleRowQueryCriteria = <span class="keyword">new</span> SingleRowQueryCriteria(tableName, primaryKey);</span><br><span class="line">    singleRowQueryCriteria.setMaxVersions(<span class="number">1</span>);</span><br><span class="line">    request.setRowQueryCriteria(singleRowQueryCriteria);</span><br><span class="line">    GetRowResponse response = syncClient.getRow(request);</span><br><span class="line">    Row row = response.getRow();</span><br><span class="line">    <span class="keyword">return</span> row.getLatestColumn(columnName).getValue().asString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在项目中同时存在<code>tablestore</code>和<code>hbase</code>时，<code>tablestore</code>中引用的<code>protobuf</code>版本<code>2.4.1</code>与<code>hbase</code>中引用的<code>protobuf</code>版本<code>2.5.0</code>版本冲突，从而导致执行<code>hbase</code>查询时报错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.VerifyError: <span class="class"><span class="keyword">class</span> <span class="title">org</span>.<span class="title">apache</span>.<span class="title">hadoop</span>.<span class="title">hbase</span>.<span class="title">protofuf</span>.<span class="title">generated</span>.<span class="title">ClientProtos</span>$<span class="title">Result</span> <span class="title">overrides</span> <span class="title">final</span> <span class="title">method</span> <span class="title">getUnknownFields</span>.()<span class="title">Lcom</span>/<span class="title">google</span>/<span class="title">protobuf</span>/<span class="title">UnknownFieldSet</span></span>;</span><br></pre></td></tr></table></figure><p>首先想到的是引入高版本的<code>protobuf</code>。但是引入高版本的<code>protobuf</code>后查询阿里的彩虹表tablestore时会报另外的错误。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.UnsupportedOperationException: This is supposed to be overridden by subclasses.</span><br></pre></td></tr></table></figure><p>尝试着将<code>hbase</code>的版本升高到<code>2.2.0</code>，然后发现问题解决了，然后继续查看了一下<code>protobuf</code>依赖冲突版本，发现多了一个<code>hbase-shaded-protobuf</code>,原来在该版本中使用了<code>hbase-shaded</code> , 用来更改<code>hbase</code>中的一些报名，解决<code>protobuf</code>的冲突问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;远程连接&quot;&gt;&lt;a href=&quot;#远程连接&quot; class=&quot;headerlink&quot; title=&quot;远程连接&quot;&gt;&lt;/a&gt;远程连接&lt;/h3&gt;&lt;p&gt;maven依赖：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
      <category term="框架" scheme="https://yaoyinglong.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="常见问题" scheme="https://yaoyinglong.github.io/categories/%E6%A1%86%E6%9E%B6/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="HBase" scheme="https://yaoyinglong.github.io/tags/HBase/"/>
    
  </entry>
  
  <entry>
    <title>Maven编译后文件损坏</title>
    <link href="https://yaoyinglong.github.io/Blog/%E6%A1%86%E6%9E%B6/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/Maven%E7%BC%96%E8%AF%91%E5%90%8E%E6%96%87%E4%BB%B6%E6%8D%9F%E5%9D%8F/"/>
    <id>https://yaoyinglong.github.io/Blog/框架/常见问题/Maven编译后文件损坏/</id>
    <published>2020-07-05T16:00:00.000Z</published>
    <updated>2020-07-07T03:37:41.145Z</updated>
    
    <content type="html"><![CDATA[<p>在一般Maven项目中的<code>build</code>标签下通常会有如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>application-test.yml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上的配置本身是没有问题的，但在某些需要需要将一些文件存放在项目中直接提供下载时，以上配置就回有问题，如果是将文件放到<code>resources</code>目录下，由于<code>filtering</code>设置为<code>true</code>，开启了过滤，会用指定的参数替换<code>directory</code>下的文件中的参数(<code>eg. ${name}</code>)。从而导致文件可能会损坏。</p><p>若配置文件需要传参数将<code>filtering</code>设置为<code>false</code>显然是不行的。使用<code>exclude</code>排除想下载的文件打包时都不会将文件打到<code>jar</code>包中，显然也是不行的。然后尝试做了如下调整，但并没有生效：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>application-test.yml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>src/main/resources/download<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources/download<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最终只能将下载的文件单独放到其他目录，然后做如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>application-test.yml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>download<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在一般Maven项目中的&lt;code&gt;build&lt;/code&gt;标签下通常会有如下配置：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/spa
      
    
    </summary>
    
      <category term="框架" scheme="https://yaoyinglong.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="常见问题" scheme="https://yaoyinglong.github.io/categories/%E6%A1%86%E6%9E%B6/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="Maven" scheme="https://yaoyinglong.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Go基础</title>
    <link href="https://yaoyinglong.github.io/Blog/Golang/Go%E5%9F%BA%E7%A1%80/"/>
    <id>https://yaoyinglong.github.io/Blog/Golang/Go基础/</id>
    <published>2020-07-02T16:00:00.000Z</published>
    <updated>2020-07-13T07:20:04.589Z</updated>
    
    <content type="html"><![CDATA[<p><code>Go</code>语言是<strong>静态类型</strong>语言，<strong>所有的内存在 <code>Go</code> 中都是经过初始化的</strong>，当一个变量被声明之后，<strong>系统自动赋予它该类型的零值</strong>：<code>int</code> 为 <code>0</code>，<code>float</code> 为 <code>0.0</code>，<code>bool</code> 为 <code>false</code>，<code>string</code> 为<strong>空字符串</strong>，<strong>指针</strong>为 <code>nil</code> 等。</p><p>只有两个<strong>相同类型</strong>的值才可以进行比较，如果值的类型是<strong>接口</strong>（<code>interface</code>），那么它们也必须都实现了<strong>相同的接口</strong>。<code>&amp;&amp;</code>的优先级比<code>||</code>高（&amp;&amp; 对应逻辑乘法，|| 对应逻辑加法，乘法比加法优先级要高）。</p><p><strong>变量</strong>、<strong>函数</strong>、<strong>常量</strong>名称如果<strong>首字母大写</strong>，则表示它<strong>可被其它的包访问</strong>；如果首字母小写，则表示它只能在本包中使用。</p><p><code>nil</code> 不是关键字或保留字且不能比较。</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>Go语言的基本类型有：</p><ul><li><code>bool</code></li><li><code>string</code></li><li><code>int</code>、<code>int8</code>、<code>int16</code>、<code>int32</code>、<code>int64</code></li><li><code>uint</code>、<code>uint8</code>、<code>uint16</code>、<code>uint32</code>、<code>uint64</code>、<code>uintptr</code>（只有在底层编程时才需要）</li><li><code>byte</code> （<code>uint8</code> 的别名）</li><li><code>rune</code> （<code>int32</code> 的别名 代表一个 <code>Unicode</code> 码点）</li><li><code>float32</code>、<code>float64</code></li><li><code>complex64</code>、<code>complex128</code></li></ul><p>尽管在某些特定的运行环境下 <code>int</code>、<code>uint</code> 和 <code>uintptr</code> 的大小可能相等，但是它们依然是不同的类型，在需要把 <code>int</code> 类型当做 <code>int32</code> 类型使用的时候必须显示的对类型进行转换。</p><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>Go语言常用容器有<strong>数组</strong>，<strong>切片</strong>，<code>Map</code>，<code>List</code>。</p><p>数组的长度必须是<strong>常量表达式</strong>，若数组长度的位置出现<code>...</code>省略号，则表示数组的长度是根据<strong>初始化值的个数</strong>来计算。数组的长度是数组类型的一个组成部分，若两个数组<strong>类型相同</strong>（包括数组的<strong>长度</strong>，数组中<strong>元素的类型</strong>），可直接通过较运算符<code>==</code>和<code>!=</code>来判断两个数组是否相等，<strong>不能比较两个类型不同的数组</strong>，否则程序将无法完成编译。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numArr = [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>,&#125;</span><br><span class="line">strArr := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>切片</strong>（<code>slice</code>）是对数组的一个<strong>连续片段的引用</strong>，所以切片是一个引用类型，终止索引标识的项不包括在切片内。切片的内部结构包含<strong>地址</strong>、<strong>大小</strong>和<strong>容量</strong>，切片一般<strong>用于快速地操作一块数据集合</strong>。切片在扩容时，<strong>容量的扩展规律是按容量的 <code>2</code> 倍数进行扩充</strong>。在切片开头添加元素一般都会导致内存的重新分配，而且会导致已有元素全部被复制 1 次。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>,&#125;</span><br><span class="line">slice := arr[:]</span><br><span class="line">slice := arr[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">slice := arr[<span class="number">1</span>:]</span><br><span class="line">slice := arr[:<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> slice []<span class="keyword">int</span></span><br><span class="line">slice = <span class="built_in">append</span>(slice, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> slice = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">slice = <span class="built_in">append</span>(slice, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">slice = <span class="built_in">append</span>(slice, []<span class="keyword">int</span>&#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;...)</span><br><span class="line">slice = <span class="built_in">append</span>([]<span class="keyword">int</span>&#123;<span class="number">-3</span>, <span class="number">-2</span>, <span class="number">-1</span>&#125;, slice...)</span><br><span class="line"></span><br><span class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">slice = <span class="built_in">append</span>(slice[:<span class="number">2</span>], <span class="built_in">append</span>([]<span class="keyword">int</span>&#123;<span class="number">6</span>, <span class="number">7</span>&#125;, slice[<span class="number">2</span>:]...)...)</span><br><span class="line"></span><br><span class="line">sliceA := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">sliceB := []<span class="keyword">int</span>&#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;</span><br><span class="line">copyCount := <span class="built_in">copy</span>(sliceA, sliceB)</span><br><span class="line"></span><br><span class="line">sliceB := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">sliceA := []<span class="keyword">int</span>&#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;</span><br><span class="line">copyCount := <span class="built_in">copy</span>(sliceA, sliceB)</span><br></pre></td></tr></table></figure><p><code>map</code> 是引用类型，<strong>可动态增长</strong>，未初始化的 <code>map</code> 的值是 <code>nil</code>，使用函数 <code>len()</code> 可以获取 <code>map</code> 中 <code>pair</code> 的数目。<code>map</code>不能使用<code>cap()</code>函数。定义map时可现实指定容量，当 map 增长到容量上限的时候，如果再增加新的 key-value，map 的大小会自动加 <code>1</code>。map可以存函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mapLit = <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> mapLit <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mapLit = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">mapLit := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>&#123;<span class="number">1</span>: <span class="string">"a"</span>, <span class="number">2</span>: <span class="string">"b"</span>&#125;</span><br><span class="line">mapLit[<span class="number">3</span>] = <span class="string">"c"</span></span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> mapLit &#123;</span><br><span class="line">    fmt.Println(<span class="string">"key value:"</span>, key, value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">delete</span>(mapLit, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">mapLit := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</span><br><span class="line">    <span class="string">"hello"</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="string">"world"</span>: <span class="number">200</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> value, isExist := mapLit[<span class="string">"hello"</span>]；isExist：</span><br><span class="line">fmt.Println(<span class="string">"value:"</span>, value)</span><br><span class="line"></span><br><span class="line">skill := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="string">"fire"</span>: <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"chicken fire"</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">f, ok := skill[<span class="string">"fire"</span>]</span><br></pre></td></tr></table></figure><p>列表是一种<strong>非连续</strong>的存储容器，由多个节点组成，节点通过一些变量记录彼此之间的关系。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lit := list.New()</span><br><span class="line">lit.PushBack(<span class="string">"AA"</span>)</span><br><span class="line">lit.PushFront(<span class="string">"BB"</span>)</span><br><span class="line">element := lit.PushFront(<span class="string">"CC"</span>)</span><br><span class="line">lit.InsertBefore(<span class="string">"DD"</span>, element)</span><br><span class="line"><span class="keyword">for</span> i := lit.Front(); i != <span class="literal">nil</span>; i = i.Next() &#123;</span><br><span class="line">   fmt.Println(<span class="string">"lit value:"</span>, i.Value)</span><br><span class="line">&#125;</span><br><span class="line">lit.Remove(element)</span><br></pre></td></tr></table></figure><p>Go语言线程安全的<code>sync.Map</code>，<code>Range</code>返回为<code>false</code>时将不再往下遍历。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> syncMap sync.Map</span><br><span class="line">syncMap.Store(<span class="number">1</span>, <span class="string">"a"</span>)</span><br><span class="line">syncMap.Store(<span class="number">2</span>, <span class="string">"b"</span>)</span><br><span class="line">value, ok := syncMap.Load(<span class="number">2</span>)</span><br><span class="line">syncMap.Range(<span class="function"><span class="keyword">func</span><span class="params">(key, value <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"key, value"</span>, key, value)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><p>Go 语言常用流程控制有 <code>if</code> 和 <code>for</code>，而 <code>switch</code> 和 <code>goto</code> 主要是为了简化代码、降低重复代码而生的结构，属于扩展类的流程控制。</p><p><code>if-else</code>分支结构，可结合<code>goto</code>使用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> index := <span class="number">12</span>; index &gt; <span class="number">10</span> &#123;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> index := <span class="number">10</span>; index == <span class="number">10</span> &#123;</span><br><span class="line">    <span class="keyword">goto</span> onExit</span><br><span class="line">&#125;</span><br><span class="line">onExit:</span><br><span class="line">fmt.Println(<span class="string">"exit"</span>)</span><br></pre></td></tr></table></figure><p><code>go</code>中只有<code>for</code>循环结构，不支持 <code>while</code> 和 <code>do-while</code> 结构；for range 可以遍历<strong>数组</strong>、<strong>切片</strong>、<strong>字符串</strong>、<code>map</code> 及<strong>通道</strong>（<code>channel</code>）；其中用到的<code>range</code> 返回的是每个<strong>元素的副本</strong>，而不是直接返回对该元素的引用。字符串的遍历是一个个<code>rune</code> 字符。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">JLoop:</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">5</span>; j++ &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">5</span> &#123;</span><br><span class="line">            <span class="keyword">break</span> JLoop</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> index <span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> index &lt; <span class="number">10</span> &#123;</span><br><span class="line">    index++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">str := <span class="string">"12456789"</span></span><br><span class="line"><span class="keyword">for</span> pos, char := <span class="keyword">range</span> str &#123;</span><br><span class="line">    fmt.Println(<span class="string">"pos, char:"</span>, pos, char)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">channel := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    channel &lt;- <span class="number">1</span></span><br><span class="line">    channel &lt;- <span class="number">2</span></span><br><span class="line">    channel &lt;- <span class="number">3</span></span><br><span class="line">    <span class="built_in">close</span>(channel)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">for</span> value := <span class="keyword">range</span> channel &#123;</span><br><span class="line">    fmt.Println(<span class="string">"channel value:"</span>, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>switch</code>表达式不需要为<strong>常量</strong>，甚至不需要为<strong>整数</strong>，<code>case</code> 按照从上到下的顺序进行求值，直到找到匹配的项，若<code>switch</code> 没有表达式，则对 <code>true</code> 进行匹配。<code>fallthrough</code>会紧接着执行下一个 <code>case</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">str := <span class="string">"kk"</span></span><br><span class="line"><span class="keyword">switch</span> str &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"hello"</span>, <span class="string">"kk"</span>:</span><br><span class="line">    fmt.Println(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"world"</span>:</span><br><span class="line">    fmt.Println(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    fmt.Println(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r := <span class="number">11</span></span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> r &gt; <span class="number">10</span> &amp;&amp; r &lt; <span class="number">20</span>:</span><br><span class="line">    fmt.Println(r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p><code>Go</code> 语言支持<strong>普通函数</strong>、<strong>匿名函数</strong>和<strong>闭包</strong>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">funcA</span><span class="params">()</span> <span class="params">(a, b <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">   a = <span class="number">1</span></span><br><span class="line">   b = <span class="number">2</span></span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">a, b := funcA()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">funcB</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">3</span>, <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line">a, b := funcB()</span><br><span class="line">f := funcB</span><br><span class="line">a, b := f()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">funcC</span><span class="params">()</span> <span class="params">(a, b <span class="keyword">string</span>, c <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"a1"</span>, <span class="string">"b2"</span>, <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line">a, b, c := funcC()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">funcD</span><span class="params">(arr []<span class="keyword">int</span>, f <span class="keyword">func</span>(<span class="keyword">int</span>)</span>)</span> &#123;</span><br><span class="line">   <span class="keyword">for</span> _, value := <span class="keyword">range</span> arr &#123;</span><br><span class="line">      f(value)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">funcD([]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;, <span class="function"><span class="keyword">func</span><span class="params">(data <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"this value:"</span>, data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数变量</span></span><br><span class="line"><span class="keyword">var</span> f <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">f</span> = <span class="title">funcA</span></span></span><br><span class="line"><span class="function"><span class="title">a</span>, <span class="title">b</span> := <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// 匿名函数</span></span><br><span class="line"><span class="function"><span class="title">func</span><span class="params">(data <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"inner func:"</span>, data)</span><br><span class="line">&#125;(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">f := <span class="function"><span class="keyword">func</span><span class="params">(data <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"inner func:"</span>, data)</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">500</span>)</span><br></pre></td></tr></table></figure><p><strong>闭包</strong>是引用了<strong>自由变量</strong>的函数，被引用的自由变量和函数一同存在，即使已经离开了自由变量的环境也不会被释放或者删除。被捕获到闭包中的变量让闭包本身拥有了记忆效应。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">accumulate</span><span class="params">(value <span class="keyword">int</span>)</span> <span class="title">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">      value++</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">accumulator := accumulate(<span class="number">1</span>)</span><br><span class="line">fmt.Println(accumulator()) <span class="comment">// 2</span></span><br><span class="line">fmt.Println(accumulator()) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>可变参数和任意类型的可以变参数，用 <code>interface{}</code> 传递<strong>任意类型</strong>数据，<strong>可变参数</strong>变量是一个<strong>包含所有参数的切片</strong>，如果要将这个含有可变参数的变量传递给下一个可变参数函数，可以在传递时给可变参数变量后面添加<code>...</code>，这样就可以将切片中的元素进行传递，而不是传递可变参数变量本身。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">notFixedParam</span><span class="params">(args ...<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">notFixedParamV2</span><span class="params">(format <span class="keyword">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">   <span class="keyword">for</span> _, arg := <span class="keyword">range</span> args &#123;</span><br><span class="line">      <span class="keyword">switch</span> arg.(<span class="keyword">type</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="keyword">int</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="keyword">string</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="keyword">int64</span>:</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">notFixedParam(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">notFixedParamV2(<span class="string">"kk"</span>, <span class="number">1</span>, <span class="number">234</span>, <span class="string">"hello"</span>, <span class="number">3.14</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rawPrint</span><span class="params">(rawList ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, raw := <span class="keyword">range</span> rawList &#123;</span><br><span class="line">fmt.Println(raw)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">print</span><span class="params">(slist ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">rawPrint(slist...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>defer</code> 语句会将其后面跟随的语句进行<strong>延迟处理</strong>，在 <code>defer</code> 归属的函数<strong>即将返回</strong>时，将延迟处理的语句<strong>按 <code>defer</code> 的逆序进行执行</strong>。类似<code>java</code>的<code>finally</code>语句块。可与宕机<code>panic</code> 一起使用，宕机前会优先执行<code>defer</code>。提供<code>recover</code> 用于宕机恢复，且仅在延迟函数 <code>defer</code> 中有效。正常的执行过程中，调用 <code>recover</code> 会返回 <code>nil</code> 并且没有其他任何效果，调用 <code>recover</code> 可以捕获到 <code>panic</code> 的输入值，并且恢复正常的执行。<code>recover</code> 的宕机恢复机制就对应其他语言中的 <code>try/catch</code> 机制。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">"宕机后要做的事情"</span>)</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"宕机"</span>)</span><br></pre></td></tr></table></figure><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p><strong>结构体</strong>的定义只是一种<strong>内存布局的描述</strong>，只有当结构体实例化时，才会真正地分配内存。使用<code>new</code>或<code>&amp;</code>构造的类型实例的类型是<strong>类型的指针</strong>。</p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><h3 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h3><h3 id="编译与工具"><a href="#编译与工具" class="headerlink" title="编译与工具"></a>编译与工具</h3><h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><ul><li>测试用例文件<strong>不会参与正常源码的编译</strong>，<strong>不会被包含到可执行文件中</strong>；</li><li>测试用例的文件名必须以<code>_test.go</code>结尾；</li><li>需要使用 <code>import</code> 导入 <code>testing</code> 包；</li><li>测试函数的名称要以<code>Test</code>或<code>Benchmark</code>开头，后面可以跟任意字母组成的字符串，但第一个字母必须大写，例如 TestAbc()，一个测试用例文件中可以包含多个测试函数；</li><li>单元测试则以<code>(t *testing.T)</code>作为参数，性能测试以<code>(t *testing.B)</code>做为参数；</li><li>测试用例文件使用<code>go test</code>命令来执行，源码中不需要 main() 函数作为入口，所有以<code>_test.go</code>结尾的源码文件内以<code>Test</code>开头的函数都会自动执行。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;Go&lt;/code&gt;语言是&lt;strong&gt;静态类型&lt;/strong&gt;语言，&lt;strong&gt;所有的内存在 &lt;code&gt;Go&lt;/code&gt; 中都是经过初始化的&lt;/strong&gt;，当一个变量被声明之后，&lt;strong&gt;系统自动赋予它该类型的零值&lt;/strong&gt;：&lt;co
      
    
    </summary>
    
      <category term="Golang" scheme="https://yaoyinglong.github.io/categories/Golang/"/>
    
    
      <category term="Go" scheme="https://yaoyinglong.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>树</title>
    <link href="https://yaoyinglong.github.io/Blog/%E7%AE%97%E6%B3%95/%E6%A0%91/"/>
    <id>https://yaoyinglong.github.io/Blog/算法/树/</id>
    <published>2020-06-21T16:00:00.000Z</published>
    <updated>2020-06-22T03:34:18.140Z</updated>
    
    <content type="html"><![CDATA[<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>每个节点有零个火多个子节点；</li><li>没有父节点的节点称为根节点；</li><li>每个非根节点有且仅有一个父节点；</li><li>除了根节点以外，每个子节点都可分为多个不相交的子树；</li></ul><h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><ul><li><strong>节点的度</strong>：一个节点含有的子树的个数称为该节点的度；</li><li><strong>树的度</strong>：一棵树中，最大的节点的度称为树的度；</li><li><strong>叶节点或终端节点</strong>：度为零的节点；</li><li><strong>父节点</strong>：若一个节点含有子节点，则这个节点称为其子节点的父节点；</li><li><strong>子节点</strong>：一个节点含有的子树的根节点称为该节点的子节点；</li><li><strong>兄弟节点</strong>：具有相同父节点的节点互称为兄弟节点；</li><li><strong>节点的层次</strong>：从根开始定义起，根为第1层，根的子节点为第2层，以此类推；</li><li><strong>树的高度或深度</strong>：树中节点的最大层次；</li><li><strong>堂兄弟节点</strong>：父节点在同一层的节点互为堂兄弟；</li><li><strong>节点的祖先</strong>：从根到该节点所经分支上的所有节点；</li><li><strong>子孙</strong>：以某节点为根的子树中任一节点都称为该节点的子孙。</li><li><strong>森林</strong>：由<code>m（m&gt;=0）</code>棵互不相交的树的集合称为森林；</li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li><strong>无序树</strong>：树中任意节点的子节点之间没有顺序关系，这种树称为无序树，也称为<strong>自由树</strong>；</li><li><strong>有序树</strong>：树中任意节点的子节点之间有顺序关系，这种树称为有序树；<ul><li><strong>二叉树</strong>：每个节点最多含有两个子树的树称为二叉树；<ul><li><strong>完全二叉树</strong>：对于一颗二叉树，假设其深度为<code>d(d&gt;1)</code>。除了第<code>d</code>层外，其它各层的节点数目均已达最大值，且第<code>d</code>层所有节点从左向右连续地紧密排列，这样的二叉树被称为完全二叉树，其中<strong>满二叉树</strong>的定义是所有叶节点都在最底层的完全二叉树;</li><li><strong>平衡二叉树</strong>（<code>AVL</code>树，<strong>红黑树</strong>是该树的一种）：<strong>当且仅当任何节点的两棵子树的高度差不大于1</strong>的二叉树，<code>SGI</code>/<code>STL</code>的<code>set</code>/<code>map</code>底层都是用<strong>红黑树</strong>实现的；</li><li><strong>排序二叉树</strong>（<strong>二叉查找树</strong>（英语：<code>Binary Search Tree</code>），也称<strong>二叉搜索树</strong>、<strong>有序二叉树</strong>）；</li></ul></li><li><strong>霍夫曼树</strong>（用于信息编码）：<strong>带权路径最短的二叉树</strong>称为哈夫曼树或<strong>最优二叉树</strong>；</li><li><strong>B树</strong>：一种<strong>对读写操作进行优化的自平衡的二叉查找树</strong>，能够保持数据有序，拥有多余两个子树。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;每个节点有零个火多个子节点；&lt;/li&gt;
&lt;li&gt;没有父节点的节点称为根节点；&lt;/li&gt;
&lt;li&gt;每个非根节点有且仅有一个父节点；
      
    
    </summary>
    
      <category term="hide" scheme="https://yaoyinglong.github.io/categories/hide/"/>
    
    
      <category term="算法" scheme="https://yaoyinglong.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>图</title>
    <link href="https://yaoyinglong.github.io/Blog/%E7%AE%97%E6%B3%95/%E5%9B%BE/"/>
    <id>https://yaoyinglong.github.io/Blog/算法/图/</id>
    <published>2020-06-21T16:00:00.000Z</published>
    <updated>2020-06-22T03:02:29.144Z</updated>
    
    <content type="html"><![CDATA[<p>​    图可分为<strong>有向图</strong>和<strong>无向图</strong>，一般用<code>G=(V,E)</code>来表示图，<code>V</code>表示顶点，<code>E</code>表示通过图的边，常用<strong>邻接矩阵</strong>或者<strong>邻接表</strong>来描述一副图。图的遍历算法，根据访问节点的顺序，可分为<strong>广度优先搜索</strong>（<code>BFS</code>：Breadth First Search）和<strong>深度优先搜索</strong>（<code>DFS</code>：）</p><h3 id="广度优先搜索（BFS）"><a href="#广度优先搜索（BFS）" class="headerlink" title="广度优先搜索（BFS）"></a>广度优先搜索（BFS）</h3><p>​    广度优先搜索在进一步遍历图中顶点之前，<strong>先访问当前顶点的所有邻接结点</strong>。</p><ol><li>首先选择一个顶点作为起始结点</li><li>将起始结点放入队列中</li><li>从队列首部选出一个顶点，并找出所有与之邻接的结点，将找到的邻接结点放入队列尾部</li><li>按照同样的方法处理队列中的下一个结点</li></ol><h3 id="深度优先搜索（DFS）"><a href="#深度优先搜索（DFS）" class="headerlink" title="深度优先搜索（DFS）"></a>深度优先搜索（DFS）</h3><p>​    深度优先搜索在搜索过程中访问某个顶点后，需要<strong>递归</strong>地访问此顶点的<strong>所有未访问过的相邻顶点</strong>，<code>DFS</code>在<strong>环监测</strong>和<strong>拓扑排序</strong>中都有不错的应用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    图可分为&lt;strong&gt;有向图&lt;/strong&gt;和&lt;strong&gt;无向图&lt;/strong&gt;，一般用&lt;code&gt;G=(V,E)&lt;/code&gt;来表示图，&lt;code&gt;V&lt;/code&gt;表示顶点，&lt;code&gt;E&lt;/code&gt;表示通过图的边，常用&lt;strong&gt;邻接矩阵&lt;/s
      
    
    </summary>
    
      <category term="hide" scheme="https://yaoyinglong.github.io/categories/hide/"/>
    
    
      <category term="算法" scheme="https://yaoyinglong.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>幽默感</title>
    <link href="https://yaoyinglong.github.io/Blog/%E8%87%AA%E5%BA%A6/%E5%B9%BD%E9%BB%98%E6%84%9F/"/>
    <id>https://yaoyinglong.github.io/Blog/自度/幽默感/</id>
    <published>2020-06-20T16:00:00.000Z</published>
    <updated>2020-07-03T02:40:20.846Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="hide" scheme="https://yaoyinglong.github.io/categories/hide/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux常用技巧</title>
    <link href="https://yaoyinglong.github.io/Blog/Linux/Linux%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>https://yaoyinglong.github.io/Blog/Linux/Linux常用技巧/</id>
    <published>2020-06-19T01:57:12.119Z</published>
    <updated>2020-06-19T01:57:12.119Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SecureCRT无操作自动登出"><a href="#SecureCRT无操作自动登出" class="headerlink" title="SecureCRT无操作自动登出"></a>SecureCRT无操作自动登出</h3><p><code>echo $TMOUT</code> 查看无操作自动登出时间，将该时间稍微调小一点设置到SecureCRT Session中</p><p><img src="../../../../images/CRT永不超时设置.png" alt="CRT不超时设置"></p><h3 id="SecureCRT文件上传下载"><a href="#SecureCRT文件上传下载" class="headerlink" title="SecureCRT文件上传下载"></a>SecureCRT文件上传下载</h3><p><code>rz</code>：将文件从本地上传到服务器</p><p><code>sz [file1] [file2] [dir/*]</code>：本地从服务器上下载文件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;SecureCRT无操作自动登出&quot;&gt;&lt;a href=&quot;#SecureCRT无操作自动登出&quot; class=&quot;headerlink&quot; title=&quot;SecureCRT无操作自动登出&quot;&gt;&lt;/a&gt;SecureCRT无操作自动登出&lt;/h3&gt;&lt;p&gt;&lt;code&gt;echo $TM
      
    
    </summary>
    
      <category term="Linux" scheme="https://yaoyinglong.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://yaoyinglong.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>数据库常面问题</title>
    <link href="https://yaoyinglong.github.io/Blog/Interview/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E9%9D%A2%E9%97%AE%E9%A2%98/"/>
    <id>https://yaoyinglong.github.io/Blog/Interview/数据库常面问题/</id>
    <published>2020-06-18T16:00:00.000Z</published>
    <updated>2020-06-19T02:11:17.303Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="hide" scheme="https://yaoyinglong.github.io/categories/hide/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring常面问题</title>
    <link href="https://yaoyinglong.github.io/Blog/Interview/Spring%E5%B8%B8%E9%9D%A2%E9%97%AE%E9%A2%98/"/>
    <id>https://yaoyinglong.github.io/Blog/Interview/Spring常面问题/</id>
    <published>2020-06-18T16:00:00.000Z</published>
    <updated>2020-06-19T02:09:25.150Z</updated>
    
    <content type="html"><![CDATA[<p>1、Spring Boot、Spring MVC、Spring之间的区别？（Spring Boot本质是什么？）</p><p>2、Spring Boot Starter是什么？</p><p>3、如何自定义Spring Boot Starter？（如何扩展Spring Boot）</p><p>4、Spring Boot的自动装配原理是什么？（源码分析哦）</p><p>5、Spring Boot的启动流程是什么？</p><p>6、有没有看过Spring Boot源码？你觉得最神奇的地方是什么？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、Spring Boot、Spring MVC、Spring之间的区别？（Spring Boot本质是什么？）&lt;/p&gt;
&lt;p&gt;2、Spring Boot Starter是什么？&lt;/p&gt;
&lt;p&gt;3、如何自定义Spring Boot Starter？（如何扩展Spring B
      
    
    </summary>
    
      <category term="hide" scheme="https://yaoyinglong.github.io/categories/hide/"/>
    
    
  </entry>
  
  <entry>
    <title>Excel文件数据抽取</title>
    <link href="https://yaoyinglong.github.io/Blog/Python/Excel%E6%96%87%E4%BB%B6%E6%95%B0%E6%8D%AE%E6%8A%BD%E5%8F%96/"/>
    <id>https://yaoyinglong.github.io/Blog/Python/Excel文件数据抽取/</id>
    <published>2020-06-18T16:00:00.000Z</published>
    <updated>2020-06-19T02:45:28.207Z</updated>
    
    <content type="html"><![CDATA[<p>本文仅仅是对Excel中的数据进行了简单的读取抽出并统一输出到指定的地方，在读取老版本xls文件的时候可能会出现编码的问题导致文件读取失败：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UnicodeDecodeError: <span class="string">'utf-16-le'</span> codec can<span class="string">'t decode byte 0x40 in position 104: truncated data</span></span><br></pre></td></tr></table></figure></p><p>可以通过对报错的源码<code>unpack_unicode</code>代码进行<code>try-except</code>并将其赋值为空。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>: </span><br><span class="line">    strg = unpack_unicode(data, <span class="number">0</span>, lenlen=<span class="number">2</span>) </span><br><span class="line"><span class="keyword">except</span>: </span><br><span class="line">    strg = <span class="string">""</span></span><br></pre></td></tr></table></figure><p>以下代码仅仅是遍历指定目录下的所有文件，之所以多写一重判断循环文件，是为了将第一层的文件夹名称生成一个新的<code>sheet</code>，第一级文件夹下的所有文件的数据都统计到当前文件夹名称所对应的<code>sheet</code>中，且对实际情况进行了简单的数据过滤和处理，在此仅仅是存储一个简单的模板，后续有其他的需求可在该模板上持续修改优化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_value</span><span class="params">(basePath)</span>:</span></span><br><span class="line">    fileDirs = os.listdir(basePath)</span><br><span class="line">    dataAllValue = pd.DataFrame()</span><br><span class="line">    <span class="keyword">for</span> fileDir <span class="keyword">in</span> fileDirs:</span><br><span class="line">        childFile = os.path.join(<span class="string">'%s%s%s'</span> % (basePath, <span class="string">"\\"</span>, fileDir))</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(childFile):</span><br><span class="line">            <span class="keyword">if</span> fileDir.endswith(<span class="string">"xls"</span>) <span class="keyword">or</span> fileDir.endswith(<span class="string">"xlsx"</span>) <span class="keyword">or</span> fileDir.endswith(<span class="string">"XLS"</span>) <span class="keyword">or</span> fileDir.endswith(<span class="string">"XLSX"</span>):</span><br><span class="line">                colunm_count, sheetDataFrameValue = read_excel(childFile)</span><br><span class="line">                <span class="keyword">if</span> sheetDataFrameValue.empty:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> colunm_count == <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                dataAllValue = dataAllValue.append(sheetDataFrameValue)</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(childFile):</span><br><span class="line">            childDataFrameValue = find_value(childFile)</span><br><span class="line">            dataAllValue = dataAllValue.append(childDataFrameValue)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dataAllValue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_excel</span><span class="params">(childFile)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        FileObj = xlrd.open_workbook(childFile)  <span class="comment"># 打开处理的excel文件</span></span><br><span class="line">        sheetNames = FileObj.sheet_names()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">"有问题的文件："</span>, childFile)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, pd.DataFrame()</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> sheetName <span class="keyword">in</span> sheetNames:</span><br><span class="line">        sheet = FileObj.sheets()[i]  <span class="comment"># 获取第一个工作表</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        row_count = sheet.nrows  <span class="comment"># 行数</span></span><br><span class="line">        colunm_count = <span class="number">0</span></span><br><span class="line">        sheetDataFrameValue = pd.DataFrame()</span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> range(<span class="number">2</span>, row_count):</span><br><span class="line">            row_values = [cell_value_clear(cell_value) <span class="keyword">for</span> cell_value <span class="keyword">in</span> sheet.row_values(element)]</span><br><span class="line">            <span class="keyword">for</span> keyValue <span class="keyword">in</span> keyValues:</span><br><span class="line">                <span class="keyword">if</span> keyValue.lower() <span class="keyword">in</span> row_values:</span><br><span class="line">                    findCon = sheet.row_values(element)</span><br><span class="line">                    not_empty = [i <span class="keyword">for</span> i <span class="keyword">in</span> findCon <span class="keyword">if</span> i != <span class="string">''</span>]</span><br><span class="line">                    <span class="keyword">if</span> len(not_empty) &lt; <span class="number">3</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                    columnDf = pd.DataFrame(findCon)</span><br><span class="line">                    columnDf.rename(columns=&#123;<span class="number">0</span>: colunm_count&#125;, inplace=<span class="literal">True</span>)</span><br><span class="line">                    <span class="keyword">if</span> sheetDataFrameValue.empty:</span><br><span class="line">                        sheetDataFrameValue = columnDf.join(sheetDataFrameValue)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        sheetDataFrameValue = sheetDataFrameValue.join(columnDf)</span><br><span class="line">                    colunm_count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> colunm_count, sheetDataFrameValue</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cell_value_clear</span><span class="params">(cell_value)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> cell_value <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">    <span class="keyword">return</span> str(cell_value).replace(<span class="string">" "</span>, <span class="string">""</span>).lower()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_excel_xlsx</span><span class="params">(dataFrameValue1, sheetName, excelName)</span>:</span></span><br><span class="line">    newExcel = pd.DataFrame(dataFrameValue1)</span><br><span class="line">    writer = pd.ExcelWriter(excelName, engine=<span class="string">'openpyxl'</span>)</span><br><span class="line">    is_file_exists = os.path.exists(excelName)  <span class="comment"># 判断文件是否存在</span></span><br><span class="line">    <span class="keyword">if</span> is_file_exists <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">        book = openpyxl.load_workbook(writer.path)</span><br><span class="line">        writer.book = book</span><br><span class="line">        newExcel.to_excel(excel_writer=writer, sheet_name=sheetName, encoding=<span class="string">"utf-8"</span>, index=<span class="literal">False</span>)</span><br><span class="line">        writer.save()</span><br><span class="line">        writer.close()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        newExcel.to_excel(excel_writer=writer, sheet_name=sheetName, encoding=<span class="string">"utf-8"</span>, index=<span class="literal">False</span>)</span><br><span class="line">        writer.save()</span><br><span class="line">        writer.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(basePath)</span>:</span></span><br><span class="line">    pathDirs = os.listdir(basePath)</span><br><span class="line">    <span class="keyword">for</span> path <span class="keyword">in</span> pathDirs:</span><br><span class="line">        provinceDataPath = os.path.join(<span class="string">'%s%s%s'</span> % (basePath, <span class="string">"\\"</span>, path))</span><br><span class="line">        print(provinceDataPath)</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(provinceDataPath):</span><br><span class="line">            dataAllValue = find_value(provinceDataPath)</span><br><span class="line">            print(dataAllValue)</span><br><span class="line">            <span class="keyword">if</span> dataAllValue.empty:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            write_excel_xlsx(dataAllValue, path, excelName)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 文件路径</span></span><br><span class="line">    basePath = <span class="string">r"F:\data"</span></span><br><span class="line">    keyValues = [<span class="string">"指标1"</span>, <span class="string">"指标2"</span>, <span class="string">"指标3"</span>, <span class="string">"指标4"</span>]</span><br><span class="line">    excelName = <span class="string">'F:\抽取数据\数据统计总览.xlsx'</span>  <span class="comment"># 文件保存的路径</span></span><br><span class="line">    run(basePath)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文仅仅是对Excel中的数据进行了简单的读取抽出并统一输出到指定的地方，在读取老版本xls文件的时候可能会出现编码的问题导致文件读取失败：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
      <category term="Python" scheme="https://yaoyinglong.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://yaoyinglong.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>后悔药</title>
    <link href="https://yaoyinglong.github.io/Blog/%E8%87%AA%E5%BA%A6/%E5%90%8E%E6%82%94%E8%8D%AF/"/>
    <id>https://yaoyinglong.github.io/Blog/自度/后悔药/</id>
    <published>2020-05-25T16:00:00.000Z</published>
    <updated>2020-07-03T02:40:20.845Z</updated>
    
    <content type="html"><![CDATA[<h3 id="挽回心态"><a href="#挽回心态" class="headerlink" title="挽回心态"></a>挽回心态</h3><p>​    没有一个好的挽回心态，任何技巧都等于零，挽回是一个长期的过程，是一次真正的<strong>自我成长</strong>和<strong>救赎</strong>，是不是自己确实掌握了经营好感情的能力、是不是已经真正的获得了成长、是不是你们之间的根本问题已经得到了解决、是不是他真的重新爱上你了、是不是以后你们真的能好好的在一起了；</p><h5 id="心态建设"><a href="#心态建设" class="headerlink" title="心态建设"></a>心态建设</h5><ul><li><strong>最重要的一点</strong>控制你的挽回需求感，难度越大的任务，<strong>动机因素反而越敏感</strong></li><li>避免过度自责</li><li><strong>稳住心态。 不要手贱</strong></li><li><strong>转移注意力 不要把全部心思放在挽回上 那样只会让自己更苦逼。 充实自己的生活 提升自己。</strong></li><li><strong>反撇</strong>：<strong>前期阶段进行讨好策略（是的你没看错），然后突然后撤表示放弃，从而激发起对方损失厌恶的心理，变被动为主动，变低位为高位</strong></li></ul><h5 id="思维重塑"><a href="#思维重塑" class="headerlink" title="思维重塑"></a>思维重塑</h5><h5 id="打破思维墙"><a href="#打破思维墙" class="headerlink" title="打破思维墙"></a>打破思维墙</h5><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;挽回心态&quot;&gt;&lt;a href=&quot;#挽回心态&quot; class=&quot;headerlink&quot; title=&quot;挽回心态&quot;&gt;&lt;/a&gt;挽回心态&lt;/h3&gt;&lt;p&gt;​    没有一个好的挽回心态，任何技巧都等于零，挽回是一个长期的过程，是一次真正的&lt;strong&gt;自我成长&lt;/strong
      
    
    </summary>
    
      <category term="hide" scheme="https://yaoyinglong.github.io/categories/hide/"/>
    
    
  </entry>
  
  <entry>
    <title>和女孩子相处</title>
    <link href="https://yaoyinglong.github.io/Blog/%E8%87%AA%E5%BA%A6/%E5%92%8C%E5%A5%B3%E5%AD%A9%E5%AD%90%E7%9B%B8%E5%A4%84/"/>
    <id>https://yaoyinglong.github.io/Blog/自度/和女孩子相处/</id>
    <published>2020-05-25T16:00:00.000Z</published>
    <updated>2020-07-03T02:40:20.845Z</updated>
    
    <content type="html"><![CDATA[<p><strong>多问对方的意见或建议，尽量给选项，或者让她推荐</strong></p><p><strong>认真你就输了</strong></p><p>菜单，歌单，账单</p><h3 id="话题"><a href="#话题" class="headerlink" title="话题"></a>话题</h3><ul><li>分享音乐</li></ul><h3 id="自建"><a href="#自建" class="headerlink" title="自建"></a>自建</h3><ul><li>培养自己的决断力和勇气，别总是回答：随便、都可以、都挺好等</li><li>尽量体现自己的爱心，让自己有更多的爱心和耐心，控制脾气和情绪。</li><li>提升自己的吸引力、让对方获得更多的舒适感、让对方投资更多</li></ul><h3 id="禁忌"><a href="#禁忌" class="headerlink" title="禁忌"></a>禁忌</h3><ul><li>聊天时不要抱着解决问题的思维</li><li>约会中不能没有主见</li><li>没有话题不要强聊，适可而止</li><li>别每天都是磨磨唧唧的，动不动先情绪爆表，遇事女生还没怎么样，就先焦虑的不行</li><li>尽量多的拿主意，别总是成为跟随着</li><li>犹豫不决，磨磨唧唧，反复纠结的，不是一个有魅力男人的行为</li><li>谨慎的和对方发生争吵，避免自己的负面情绪，尽量让自己不那么邋遢，控制发生关系的频率，婚前减少同居维系新鲜感</li></ul><h3 id="活动"><a href="#活动" class="headerlink" title="活动"></a>活动</h3><ul><li>猫咖</li><li>电玩城</li><li>射箭馆</li><li>逛宜家</li><li>湖边喂鱼</li><li>水族馆</li><li>看电影（私人影院）</li><li>VR</li><li>唱歌</li><li>逛公园（浣花溪公园）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;多问对方的意见或建议，尽量给选项，或者让她推荐&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;认真你就输了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;菜单，歌单，账单&lt;/p&gt;
&lt;h3 id=&quot;话题&quot;&gt;&lt;a href=&quot;#话题&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="hide" scheme="https://yaoyinglong.github.io/categories/hide/"/>
    
    
  </entry>
  
  <entry>
    <title>自度</title>
    <link href="https://yaoyinglong.github.io/Blog/%E8%87%AA%E5%BA%A6/%E8%87%AA%E5%BA%A6/"/>
    <id>https://yaoyinglong.github.io/Blog/自度/自度/</id>
    <published>2020-05-25T16:00:00.000Z</published>
    <updated>2020-06-19T01:57:12.130Z</updated>
    
    <content type="html"><![CDATA[<p>人生不如意事常八九，不爱了或者爱而不得才是人生常态</p><p>人在道理面前，总以为自己明白了，但是只有被真正教训过才会知道明白，就像之前我被天气教育那样，把伞放家里下班的时候下雨，把伞放公司上班的时候下雨，最终我买了两把伞。<br>以前我总以为真诚相待才是相处的根本，被教训过才发现，并不是这样，人与人是不同的，你认知里的真诚在别人眼里或许是污言秽语恶意中伤。</p><p>总是在第一经历某种痛苦或者说苦难的时候，是最煎熬的，也才会学会不要轻易的寄托</p><p>人总是在逆境中快速成长，才会对人生有所感悟</p><p>我是一个平凡孤独平凡且无趣的人，没有伟大的梦想，尽量热爱生活</p><p>渐渐的就发现没有什么特别热爱的东西了</p><p>其实我觉得人生最好的状态就是无欲无求，对任何事都不抱什么什么特别的期待</p><p>其实有一群经常一起玩的好朋友是真的很幸福。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;人生不如意事常八九，不爱了或者爱而不得才是人生常态&lt;/p&gt;
&lt;p&gt;人在道理面前，总以为自己明白了，但是只有被真正教训过才会知道明白，就像之前我被天气教育那样，把伞放家里下班的时候下雨，把伞放公司上班的时候下雨，最终我买了两把伞。&lt;br&gt;以前我总以为真诚相待才是相处的根本，被
      
    
    </summary>
    
      <category term="hide" scheme="https://yaoyinglong.github.io/categories/hide/"/>
    
    
  </entry>
  
  <entry>
    <title>有关于你</title>
    <link href="https://yaoyinglong.github.io/Blog/%E8%87%AA%E5%BA%A6/%E6%9C%89%E5%85%B3%E4%BA%8E%E4%BD%A0/"/>
    <id>https://yaoyinglong.github.io/Blog/自度/有关于你/</id>
    <published>2020-05-25T16:00:00.000Z</published>
    <updated>2020-07-03T02:40:20.846Z</updated>
    
    <content type="html"><![CDATA[<p>​    我知道我们性格不是很合，但是我会尽我最大可能改变自己，之前我们的每一次的不愉快，我都有用心努力的记下来然后调整我自己，一点一点的去让我能和你相处得更好，我知道在和你相处得时候很多时候，表现的没有主见，但我也不是真的没有主见，只是对在意的人什么都可以接受，什么都可以妥协，最后一次吃饭你叫我点菜，我是想点我喜欢的，但是我在考虑我点的是不是你喜欢的，所以犹豫了很久。和你相处的每一个小细节，我都尽量在用心的记下来，犯过的错，我都会尽量不犯。当时你穿的开叉的裙子，然而我并没有意识到，靠窗会走光的问题，但是你说了后我在心里想，我下次和你一起的时候一定要首先注意这些。我一直想的是我会用心慢慢的去了解你，然后慢慢改变我自己，我是一个很容易向自己在意的人妥协，即使当时即使当时不能立马妥协，但也会慢慢妥协。我一直在努力的让自己变得更好，但是你没有给我足够的时间就放弃我了。</p><p>​    这段时间看了一些书及一些知乎上的文章，没有谈过恋爱的我过于直男，以前真的不觉得自己很直，一直觉得自己是一个很敏感很细心的人，以为很多事情都知道该怎么做，但其实我错了，我连最根本的和女孩子相处应该多征求女孩子的意见和建议都没有搞明白，而且比较贪婪，想要更多跟你相处在一起，以便跟你相处在一起索取更多快乐，没有意识到顾及你的感受。然后对比与你相处的点点滴滴，犯了好多好多致命的错误，难怪你会觉得和我相处很累，可能我都还没有学会该如何好好的去爱一个人，在爱情方面太幼稚了，不能很好的把控自己的情绪和心态，让你和我相处累觉不爱。这段时间一直不断的想起我说的那些的话，对待你的一些不恰当的地方，总觉得自己的沟通力太差了，明明是很在意很喜欢的，却总是在不经意间伤害。刚开始的时候，汪鑫把你们的聊天给我看了一些，知道你有多么为我考虑，对我多么好，我真的好感动，从来没有一个人对我这么好过，觉得遇见你我好幸运。我想我一定要把我所有的好所有的温柔都给你，当时就在跟汪鑫讲，要尽我最大的努力不让你在我这受到伤害，但是却没有做到。</p><p>​    时间过去了这么久了，但我感觉仿佛还是昨天，坐在电脑旁的时候总是不由自主的想起你坐在我旁边的情景，在每一处你停留的地方经过总是不受控制的想起，你当时每一个细微的表情和动作。厨房里你调特制拌酱的场景、厕所的镜子中你整理你新刘海的样子、客厅里玩游戏时你捧着脸笑的样子、一起肩并肩从小区到我上班必经的三叉路口，每次上下班经过的时候总会不由自主的忘一眼，仿佛还能看见当时我在路灯下和你等车冲你的车屁股挥手道别是的画面、一起去北门买菜买烟、第一次牵你的手的感觉、在乒乓球台那一块停留的画面、还有你的拥抱，一遍又一遍越刻越深。有些人总是等到失去后，才追悔莫及，才懂得珍惜。</p><p>​      刚开始以为自己不会那么难受，但是我错了，我以为我可能还没有喜欢你到很深的程度，但是这么长一段时间过去了，对你的感觉不仅仅没有变淡反而越来越强烈，只是没有像刚开始在表面针扎的那么剧烈了，而是向内心深处扎根了越扎越深，有时痛得难以入眠。其实我是一个优柔寡断人，5月13号当天和你说了那些装作满不在乎故作洒脱的狠话后，都没有坚强到正常下班，然后接下来的两周害怕极了一个人独处，因为总是不断的回想起有关于你的一切，虽然我们总共算起来也只是见过四次面，从4月11号第一次见面到5月10号最后一次见面，时间也只有短短的一个月，但是我总是会不由自主的想起你出现在我视线里的所有画面，每天上班下班都会经过第一次你过来找我一起走过的那条路，脑海里都会浮现出你我们一起散步的情景，深夜滴滴载着你回去的背影，心中总是隐隐作痛。我尝试着去忘记，各种方式去转移注意力，但是刚刚还一点点的时候，又被撕开，如此往复。原来你在我心中已经占据了如此总要的分量，这段时间我的天空失去了颜色，做什么事情总会觉得没什么意义。</p><p>​    我以为时间的磨盘会抚平我心中的沟壑，但是这段时间我总是在闲下来的时候，不由自主的想起你，在夜深人静的时候想起你，在早晨一醒来还没睁开眼睛是第一个念头想到的也是你，所以总是忍不住去一遍又一遍的打开网易云音乐看看你最近听什么歌，然后一遍又一遍的听，有时候你好多天都没有更新，每次打开都有些小失落。一遍又一遍点开你朋友圈看看你有没有更新动态，我很少去看与你的聊天记录，害怕自己受不了而奔溃，实在是扛不住了，又会忍不住去翻看，然后又是长时间的自闭，或者通过微信去骚扰你。但每次找你心中有千言万语但却又不知道该说些什么好，而每次找你，隔着屏幕也能感觉到你不是很想理睬我，我也只敢每次简单强聊几句，但是也略微满足。</p><p>​    回想起第一次见面时的场景，对于你这个陌生人，而且在汪鑫说要将你介绍给我认识的前提下，我有点不自然，可能是源于我从小认识和接触的女性极少的缘故，所以第一次见面我表现的对你不理不睬满不在乎，其实总是在偷偷注意，在吃火锅的时候感觉你都没咋吃，然后又去上了一趟厕所，包括你要过苏苏手中的烟，问是什么牌子，然后KTV唱歌的时候偷偷关注你唱歌时的模样，然后后面的时候你出去了好多次，有一次时间还比较长，我还以为你走了呢，然后后面的时候你问我脖子上戴的是什么，让我有点小高兴，但还是故作冷漠和平静，第一次对你的印象感觉你是一个很文静斯文的人，而且说话也比较直爽，是我很喜欢的类型。</p><p>​    但我以为仅此而已，然后在他们的怂恿下我加了你的微信，看到你头像的时候我笑了，更加觉得你是一个真实直爽的人，当时虽然没有聊两句，但是聊起来很舒服，没多少刻意，但是即使那一刻我依然认为应该不怎么会有后续，因为我是一个不自信不主动的人，以为和之前朋友介绍的人一样，只是刚加微信的时候能唠几句，然后就没有然后了；</p><p>​    但我没想到的是你居然主动找我，我高兴坏了。接下来的聊天是我从未有过的体验，那段时间几乎每天都会半夜不由自主的醒来，然后第一个念头就是你，然后久久难以平静下来再次入眠，那段时间毫不夸张的说真的是睡着都笑醒，你是我那段时间唯一的快乐源泉，跟你相处我是真的好开心，想要时时刻刻的靠近你。然后琪琪说我终于进入简单模式了，和你相处的时间，虽然很多时候只是隔着屏幕聊天，但是我能感受得到你总是很为我着想，很体贴，对我真的很好，我是一个很容易被感动的人，好多次想到你有点不由自主的泪光闪烁，然后将头仰起45度角，那时候我更加坚定不能伤害到你，但是最终我还是没有做到，至少说让你有时候很不开心。</p><p>​    第一次你过来找我的时候，我真的好开心好感动，不喜欢舟车劳顿的你，还这么远跑过来找我，和你玩游戏的时候我真的好开心，你好细心，其实当你说要给我买生日礼物的时候我就多少有点猜到你多半会买一把刀，但是没有想到你会买一个油壶，但是我又注意到你不是很喜欢油腻的食物，所以我那段时间也在尽量的想我应该做些什么不油腻又好吃的菜给你；最开心的是游戏结束后，他们说要走了，你说你留下来帮我洗碗，我还直男的赶你走，我因此懊恼了很久；下楼后我以为你也会马上走，结果你没有你说一起走一走，你不知道我有多开心，然后你还存了我的手机号码，那一天我真的好开心。</p><p>​    你第二次过来找我，是我最最最开心的了，你还给我买了小发糕，还和你一起做饭，饭后逛小区，在牵你手的那一刻我真的好开心你没有拒绝，感觉和你的亲密程度一下子拉近了好多。在看可娄的时候，你说的那句要吃鸭鸭，我是真的好喜欢，然后送出了我人生中的第一捧花，和第一次那么拥抱一个女孩，你真的好体贴，下楼等车的时候，有点冷你主动靠近我，帮我遮挡寒冷，那时候我冰冷很多年的心一瞬间熊熊燃烧了起来。但是现在想想我好后悔，如果我当时跟你告白是不是现在结局不一样了呢，真的很讨厌犹犹豫豫畏畏缩缩的自己。</p><p>​    然后接下来的接二连三的不愉快让我搓手不及，之前两次都是说的我周末去找你的，但是我没有明白你意思，你用你来找我换我用不找你，周末和他们去吃烧烤你没有来，我好失落，而且你也不让我去找你，这其实算是第一次和第二次不愉快的导火索，所以我总想着要去找你一次，才能对得起你大老远舟车劳顿过来找我，可能我有点大男子主义吧，我觉得我应该是主动去找你的那个人，因为感觉上是一直你在为我付出，我想我一定要比你付出的更多才对。然后第二次你又是用你来找我换我不用去找你，但是我还是没有明白你用意，所以又头铁了一把惹得你不开心。也是因为这个我没有坚定把车票退掉留下来和你一起过五一的原因，可能是我内心深处的一点点可笑的自尊和骄傲吧。然后我感觉五一回去后，感觉我们之间的距离一下就远了好多，这种反差让我很难受，所以怄气的我导致第三次不愉快。</p><p>​    其实在最后一次见面前的那次不愉快后，你说和我相处很累，我知道问题已经很严重了，那一次我感觉我仿佛真的要失去你了，晚上的时候我发了很多信息给你，那些信息是我哭着抱着恐惧的心理写下来的，我知道我有一些问题，那几天花得最多的时间是到知乎上去学习该怎么和女孩子相处，相处应该避免哪些，还买了几本书，准备好好学习学习，但是还没来得及……，你就放弃我了。我真的很气，为什么在我遇到你的时候，从来没有这么忙的工作，突然一下子特别忙，如果不是第一次自己头铁惹你生气，是不是不会有后面的几次不愉快，我多半也会毫不犹豫的把回家的票退掉留下来和你一起过五一，也不会出现最后一次的不愉快。一直在想要是多给我一点时间该多好。</p><p>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    我知道我们性格不是很合，但是我会尽我最大可能改变自己，之前我们的每一次的不愉快，我都有用心努力的记下来然后调整我自己，一点一点的去让我能和你相处得更好，我知道在和你相处得时候很多时候，表现的没有主见，但我也不是真的没有主见，只是对在意的人什么都可以接受，什么都可以
      
    
    </summary>
    
      <category term="hide" scheme="https://yaoyinglong.github.io/categories/hide/"/>
    
    
  </entry>
  
  <entry>
    <title>冒泡排序</title>
    <link href="https://yaoyinglong.github.io/Blog/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <id>https://yaoyinglong.github.io/Blog/算法/排序/冒泡排序/</id>
    <published>2020-05-24T16:00:00.000Z</published>
    <updated>2020-06-19T01:57:12.128Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>比较两个相邻的元素，将值大或者小的的元素交换到一边。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>每进行一趟排序，下一趟排序就会少比较一次。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>若数据是顺序的，只需一趟即可完成排序，所需比较次数<code>C</code>和记录移动次数均<code>M</code>达到最小值，即<code>C = n -1；M = 0</code> ，所以冒泡排序的最好的时间复杂度为<code>O(n)</code></p><p>若数据是反序，则需要进行<code>n - 1</code>躺排序，且每趟排序需要<code>n - i</code>此比较（<code>0 &lt;  i &lt; n</code>）,且每次比较必须移动记录三次来达到交换记录位置，这时比较和移动次数均达到最大值，该种情况下冒泡排序得时间复杂度为<code>O(n^2)</code></p><p>综上所述冒泡排序得平均<strong>时间复杂度</strong>：<code>O(n^2)</code></p><p><strong>空间复杂度</strong>：<code>O(1)</code></p><p><strong>稳定性</strong>：<strong>稳定</strong></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bubblerSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; arr.length &amp;&amp; flag; i++)&#123;</span><br><span class="line">        flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = arr.length - i; j &gt; i ; j--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j - <span class="number">1</span>] &gt; arr[j])&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">                arr[j - <span class="number">1</span>] = temp;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h3&gt;&lt;p&gt;比较两个相邻的元素，将值大或者小的的元素交换到一边。&lt;/p&gt;
&lt;h3 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点&quot; class=&quot;header
      
    
    </summary>
    
      <category term="算法" scheme="https://yaoyinglong.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="https://yaoyinglong.github.io/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="算法，排序" scheme="https://yaoyinglong.github.io/tags/%E7%AE%97%E6%B3%95%EF%BC%8C%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>斐波那契</title>
    <link href="https://yaoyinglong.github.io/Blog/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91/"/>
    <id>https://yaoyinglong.github.io/Blog/算法/排序/斐波那契/</id>
    <published>2020-05-24T16:00:00.000Z</published>
    <updated>2020-06-19T01:57:12.128Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>比较两个相邻的元素，将值大或者小的的元素交换到一边。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>每进行一趟排序，下一趟排序就会少比较一次。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>若数据是顺序的，只需一趟即可完成排序，所需比较次数<code>C</code>和记录移动次数均<code>M</code>达到最小值，即<code>C = n -1；M = 0</code> ，所以冒泡排序的最好的时间复杂度为<code>O(n)</code></p><p>若数据是反序，则需要进行<code>n - 1</code>躺排序，且每趟排序需要<code>n - i</code>此比较（<code>0 &lt;  i &lt; n</code>）,且每次比较必须移动记录三次来达到交换记录位置，这时比较和移动次数均达到最大值，该种情况下冒泡排序得时间复杂度为<code>O(n^2)</code></p><p>综上所述冒泡排序得平均<strong>时间复杂度</strong>：<code>O(n^2)</code></p><p><strong>空间复杂度</strong>：<code>O(1)</code></p><p><strong>稳定性</strong>：<strong>稳定</strong></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bubblerSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; arr.length &amp;&amp; flag; i++)&#123;</span><br><span class="line">        flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = arr.length - i; j &gt; i ; j--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j - <span class="number">1</span>] &gt; arr[j])&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">                arr[j - <span class="number">1</span>] = temp;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h3&gt;&lt;p&gt;比较两个相邻的元素，将值大或者小的的元素交换到一边。&lt;/p&gt;
&lt;h3 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点&quot; class=&quot;header
      
    
    </summary>
    
      <category term="hide" scheme="https://yaoyinglong.github.io/categories/hide/"/>
    
    
      <category term="算法，排序" scheme="https://yaoyinglong.github.io/tags/%E7%AE%97%E6%B3%95%EF%BC%8C%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java中调用Groovy脚本</title>
    <link href="https://yaoyinglong.github.io/Blog/Java/%E5%B7%A5%E5%85%B7/Java%E4%B8%AD%E8%B0%83%E7%94%A8Groovy%E8%84%9A%E6%9C%AC/"/>
    <id>https://yaoyinglong.github.io/Blog/Java/工具/Java中调用Groovy脚本/</id>
    <published>2019-12-24T16:00:00.000Z</published>
    <updated>2019-12-26T07:48:30.432Z</updated>
    
    <content type="html"><![CDATA[<p><code>Groovy</code>是构建在<code>JVM</code>上的一个轻量级动态语言，其是<code>Java</code>实现的，与<code>Java</code>语法类是，能很好的与<code>Java</code>代码结合，及扩展现有代码。</p><p><code>Java</code>在语音动态性方面只能通过反射，且参数传递格式很严格不是很灵活，而<code>Groovy</code>是构建在<code>JVM</code>上的一个轻量级动态语言，其是<code>Java</code>实现的，与<code>Java</code>语法类是，能很好的与<code>Java</code>代码结合，及动态扩展现有代码。</p><p><code>Java</code>中可以通过<strong><code>GroovyScriptEngine</code></strong>、<strong><code>GroovyClassLoader</code></strong>、<strong><code>GroovyShell</code></strong>、<strong><code>ScriptEngineManager</code></strong>等方式调用<code>Groovy</code>，以及在实际项目中的运用。<code>Maven</code>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.groovy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>groovy-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;groovy.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="GroovyScriptEngine"><a href="#GroovyScriptEngine" class="headerlink" title="GroovyScriptEngine"></a>GroovyScriptEngine</h3><p>从指定的位置（文件系统，URL，数据库等）加载<code>Groovy</code>脚本，并且随着脚本变化而重新加载。在相互关联的多个脚本情况下使用<code>GroovyScriptEngine</code>更好些。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GroovyScriptEngine engine = <span class="keyword">new</span> GroovyScriptEngine(<span class="string">"src/test/resources/groovy/"</span>);</span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; param = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">param.put(<span class="string">"id"</span>, <span class="string">"KKKKKKKKKKKKKK"</span>);</span><br><span class="line">param.put(<span class="string">"aa"</span>, <span class="number">45</span>);</span><br><span class="line">Binding binding = <span class="keyword">new</span> Binding(param);</span><br><span class="line">Object result = engine.run(<span class="string">"Mixed.groovy"</span>, binding);</span><br></pre></td></tr></table></figure><h3 id="GroovyClassLoader"><a href="#GroovyClassLoader" class="headerlink" title="GroovyClassLoader"></a>GroovyClassLoader</h3><p><code>GroovyClassLoader</code>是一个定制的类装载器，负责解释加载<code>Java</code>类中用到的<code>Groovy</code>类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GroovyClassLoader loader = <span class="keyword">new</span> GroovyClassLoader();</span><br><span class="line">Class aClass = loader.parseClass(<span class="keyword">new</span> File(<span class="string">"src/test/resources/groovy/Mixed.groovy"</span>));</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    GroovyObject instance = (GroovyObject) aClass.newInstance();</span><br><span class="line">    Object result = instance.invokeMethod(<span class="string">"Mixed"</span>, <span class="keyword">new</span> Object[]&#123;<span class="string">"KKKKKKKKKKKKKK"</span>, <span class="number">45</span>&#125;);</span><br><span class="line">     System.out.println(result);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">     e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="GroovyShell"><a href="#GroovyShell" class="headerlink" title="GroovyShell"></a>GroovyShell</h3><p><code>GroovyShell</code>允许在<code>Java</code>类甚至<code>Groovy</code>类中求任意Groovy表达式的值。可用<code>Binding</code>对象输入参数给表达式，并最终通过<code>GroovyShell</code>返回<code>Groovy</code>表达式的计算结果。多用于推求独立的脚本或表达式。</p><p>即使使用<code>GroovyShell</code>也有多种实现方式，使用<code>invokeMethod</code>方法调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GroovyShell loader = <span class="keyword">new</span> GroovyShell();</span><br><span class="line">Script script = loader.parse(<span class="keyword">new</span> File(<span class="string">"src/test/resources/groovy/Mixed.groovy"</span>));</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Object result = script.invokeMethod(<span class="string">"Mixed"</span>, <span class="keyword">new</span> Object[]&#123;<span class="string">"KKKKKKKKKKKKKK"</span>, <span class="number">45</span>&#125;);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>GroovyShell</code>得<code>evaluate</code>方式直接调用脚本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; param = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">param.put(<span class="string">"id"</span>, <span class="string">"KKKKKKKKKKKKKK"</span>);</span><br><span class="line">param.put(<span class="string">"aa"</span>, <span class="number">45</span>);</span><br><span class="line">param.put(<span class="string">"bb"</span>, <span class="number">55L</span>);</span><br><span class="line">param.put(<span class="string">"cc"</span>, <span class="number">9.9999</span>);</span><br><span class="line">Binding binding = <span class="keyword">new</span> Binding(param);</span><br><span class="line">GroovyShell loader = <span class="keyword">new</span> GroovyShell(binding);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Object result = loader.evaluate(<span class="string">"return id + (aa + bb + cc)"</span>);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>InvokerHelper</code>类来调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; param = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">param.put(<span class="string">"id"</span>, <span class="string">"KKKKKKKKKKKKKK"</span>);</span><br><span class="line">param.put(<span class="string">"aa"</span>, <span class="number">45</span>);</span><br><span class="line">param.put(<span class="string">"bb"</span>, <span class="number">55L</span>);</span><br><span class="line">param.put(<span class="string">"cc"</span>, <span class="number">9.9999</span>);</span><br><span class="line">Binding binding = <span class="keyword">new</span> Binding(param);</span><br><span class="line"></span><br><span class="line">GroovyShell shell = <span class="keyword">new</span> GroovyShell();</span><br><span class="line">Script script = shell.parse(<span class="keyword">new</span> File(<span class="string">"src/test/resources/groovy/Mixed.groovy"</span>));</span><br><span class="line"></span><br><span class="line">Object result = InvokerHelper.createScript(script.getClass(), binding).run();</span><br><span class="line">System.out.println(result);</span><br></pre></td></tr></table></figure><p>还可以通过<code>GroovyShell</code>来直接<code>parse</code>脚本内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; param = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">param.put(<span class="string">"id"</span>, <span class="string">"KKKKKKKKKKKKKK"</span>);</span><br><span class="line">param.put(<span class="string">"aa"</span>, <span class="number">45</span>);</span><br><span class="line">param.put(<span class="string">"bb"</span>, <span class="number">55L</span>);</span><br><span class="line">param.put(<span class="string">"cc"</span>, <span class="number">9.9999</span>);</span><br><span class="line">Binding binding = <span class="keyword">new</span> Binding(param);</span><br><span class="line"></span><br><span class="line">GroovyShell shell = <span class="keyword">new</span> GroovyShell();</span><br><span class="line">Script script = shell.parse(<span class="string">"def Mixed(String id, int aa, Long bb, double cc) &#123;\n"</span> +</span><br><span class="line">                    <span class="string">"    return id + (aa + bb + cc)\n"</span> +</span><br><span class="line">                    <span class="string">"&#125;\n"</span> +</span><br><span class="line">                    <span class="string">"Mixed(id, aa, bb, cc)"</span>);</span><br><span class="line"></span><br><span class="line">Object result = InvokerHelper.createScript(script.getClass(), binding).run();</span><br><span class="line">System.out.println(result);</span><br></pre></td></tr></table></figure><h3 id="ScriptEngineManager"><a href="#ScriptEngineManager" class="headerlink" title="ScriptEngineManager"></a>ScriptEngineManager</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ScriptEngineManager manager = <span class="keyword">new</span> ScriptEngineManager();</span><br><span class="line">ScriptEngine engine = manager.getEngineByName(<span class="string">"groovy"</span>);</span><br><span class="line"></span><br><span class="line">Bindings binding = engine.createBindings();</span><br><span class="line">binding.put(<span class="string">"id"</span>, <span class="string">"KKKKKKKKKKKKKK"</span>);</span><br><span class="line">binding.put(<span class="string">"aa"</span>, <span class="number">45</span>);</span><br><span class="line">binding.put(<span class="string">"bb"</span>, <span class="number">55L</span>);</span><br><span class="line">binding.put(<span class="string">"cc"</span>, <span class="number">9.9999</span>);</span><br><span class="line"></span><br><span class="line">Object result = engine.eval(<span class="string">"return id + (aa + bb + cc)"</span>, binding);</span><br><span class="line">System.out.println(result);</span><br></pre></td></tr></table></figure><h3 id="集成常见问题"><a href="#集成常见问题" class="headerlink" title="集成常见问题"></a>集成常见问题</h3><h5 id="使用GroovyShell的parse方法导致perm区爆满的问题"><a href="#使用GroovyShell的parse方法导致perm区爆满的问题" class="headerlink" title="使用GroovyShell的parse方法导致perm区爆满的问题"></a>使用GroovyShell的parse方法导致perm区爆满的问题</h5><p>若应用中内嵌Groovy引擎，会动态执行传入的表达式并返回执行结果，而<code>Groovy</code>每执行一次脚本，都会生成一个脚本对应的<code>class</code>对象，并<code>new</code>一个<code>InnerLoader</code>去加载这个对象，而<code>InnerLoader</code>和脚本对象都无法在gc的时候被回收运行一段时间后将<code>perm</code>占满，一直触发<code>fullgc</code>。</p><p>对于同一个<code>Groovy</code>脚本，<code>Groovy</code>执行引擎都会不同的命名，且命名与时间戳有关。当传入text时，<code>class</code>对象的命名规则为：<code>&quot;script&quot; + System.currentTimeMillis() + Math.abs(text.hashCode()) + &quot;.groovy&quot;</code>。这就导致就算<code>Groovy</code>脚本未发生任何变化，每次执行<code>parse</code>方法都会新生成一个脚本对应的<code>class</code>对象，且由<code>GroovyClassLoader</code>进行加载，不断增大<code>perm</code>区。</p><p><code>JVM</code>中的<code>Class</code>只有满足以下三个条件，才能被<code>GC</code>回收，也就是该<code>Class</code>被卸载：</p><ul><li><p>该类所有的实例都已经被<code>GC</code>，也就是<code>JVM</code>中不存在该<code>Class</code>的任何实例；</p></li><li><p>加载该类的<code>ClassLoader</code>已经被<code>GC</code>；</p></li><li>该类的<code>java.lang.Class</code>对象没有在任何地方被引用，如不能在任何地方通过反射访问该类的方法。</li></ul><p>在<code>GroovyClassLoader</code>代码中有一个<code>class</code>对象的缓存，每次编译脚本时都会在<code>Map</code>中缓存这个对象，即：<code>setClassCacheEntry(clazz)</code>。每次<code>groovy</code>编译脚本后，都会缓存该脚本的<code>Class</code>对象，下次编译该脚本时，会优先从缓存中读取，这样节省掉编译的时间。这个缓存的<code>Map</code>由<code>GroovyClassLoader</code>持有，<code>key</code>是脚本的类名，这就导致每个脚本对应的<code>class</code>对象都存在引用，无法被<code>GC</code>清理掉。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;Groovy&lt;/code&gt;是构建在&lt;code&gt;JVM&lt;/code&gt;上的一个轻量级动态语言，其是&lt;code&gt;Java&lt;/code&gt;实现的，与&lt;code&gt;Java&lt;/code&gt;语法类是，能很好的与&lt;code&gt;Java&lt;/code&gt;代码结合，及扩展现有代码。&lt;/p&gt;

      
    
    </summary>
    
      <category term="Java" scheme="https://yaoyinglong.github.io/categories/Java/"/>
    
      <category term="工具" scheme="https://yaoyinglong.github.io/categories/Java/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Groovy" scheme="https://yaoyinglong.github.io/tags/Groovy/"/>
    
  </entry>
  
  <entry>
    <title>国债逆回购</title>
    <link href="https://yaoyinglong.github.io/Blog/%E7%90%86%E8%B4%A2/%E5%9B%BD%E5%80%BA%E9%80%86%E5%9B%9E%E8%B4%AD/"/>
    <id>https://yaoyinglong.github.io/Blog/理财/国债逆回购/</id>
    <published>2019-12-09T16:00:00.000Z</published>
    <updated>2019-12-10T03:23:41.248Z</updated>
    
    <content type="html"><![CDATA[<h3 id="购买技巧"><a href="#购买技巧" class="headerlink" title="购买技巧"></a>购买技巧</h3><ul><li>每到年中，年底，长的节假日前，国债逆回购利息都会比较高</li><li>国债逆回购收益最高一般出现在节假日前的第二天，一般是周四，此时逆回购收益是最高的</li><li>每年1月初的市场资金面通常会比较宽松</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;购买技巧&quot;&gt;&lt;a href=&quot;#购买技巧&quot; class=&quot;headerlink&quot; title=&quot;购买技巧&quot;&gt;&lt;/a&gt;购买技巧&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;每到年中，年底，长的节假日前，国债逆回购利息都会比较高&lt;/li&gt;
&lt;li&gt;国债逆回购收益最高一般出现在节假日前的
      
    
    </summary>
    
      <category term="hide" scheme="https://yaoyinglong.github.io/categories/hide/"/>
    
    
  </entry>
  
  <entry>
    <title>基金基本知识总结</title>
    <link href="https://yaoyinglong.github.io/Blog/%E7%90%86%E8%B4%A2/%E5%9F%BA%E9%87%91%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    <id>https://yaoyinglong.github.io/Blog/理财/基金基本知识总结/</id>
    <published>2019-12-05T16:00:00.000Z</published>
    <updated>2019-12-10T02:59:30.117Z</updated>
    
    <content type="html"><![CDATA[<h3 id="指数基金"><a href="#指数基金" class="headerlink" title="指数基金"></a>指数基金</h3><ul><li><strong>上证 50：</strong>主要投资<strong>大型企业</strong>， 50 是代表它所投资企业的数量</li><li><strong>沪深 300：</strong>主要投资<strong>中大型企业</strong>，是国内影响力最大、最重要的指数基金，沪深300是从上海和深圳两个交易所中挑选<strong>最大的300家大型企业</strong></li><li><strong>中证 500</strong>：主要投资<strong>中小型企业</strong></li><li><strong>创业版</strong>：主要投资<strong>小型企业</strong>，专门投资小型企业门槛更低的上市市场，一些当前规模不够大，盈利不够好，达不到主板上市的要求创业板</li><li><strong>红利指数</strong>：主要投资高分红企业，现金分红：股票的股息，指业绩比较好的公司， 会每年从公司的净利润当中抽出一部分，以现金分红的方式回馈给股东通过持有几十只现金分红比较高的股票，来获取更高的收益.</li><li></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;指数基金&quot;&gt;&lt;a href=&quot;#指数基金&quot; class=&quot;headerlink&quot; title=&quot;指数基金&quot;&gt;&lt;/a&gt;指数基金&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;上证 50：&lt;/strong&gt;主要投资&lt;strong&gt;大型企业&lt;/strong&gt;， 50 是代表
      
    
    </summary>
    
      <category term="hide" scheme="https://yaoyinglong.github.io/categories/hide/"/>
    
    
  </entry>
  
  <entry>
    <title>Maven加密JAR包</title>
    <link href="https://yaoyinglong.github.io/Blog/Maven/Maven%E5%8A%A0%E5%AF%86JAR%E5%8C%85/"/>
    <id>https://yaoyinglong.github.io/Blog/Maven/Maven加密JAR包/</id>
    <published>2019-10-27T16:00:00.000Z</published>
    <updated>2019-10-28T08:21:00.530Z</updated>
    
    <content type="html"><![CDATA[<p>在某些情况下可能会需要将<code>JAR</code>包提供给第三方使用，但又不想泄露源码，可以对架包进行加密处理。可以使用<code>xjar-maven-plugin</code>插件对生成得<code>JAR</code>进行加密，<code>Maven</code>配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.core-lib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xjar-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>v2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>build<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">password</span>&gt;</span>7nBHK8bKB6<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>com/icloud/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sourceDir</span>&gt;</span>$&#123;outputDirectory&#125;<span class="tag">&lt;/<span class="name">sourceDir</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sourceJar</span>&gt;</span>$&#123;finalName&#125;.jar<span class="tag">&lt;/<span class="name">sourceJar</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">targetDir</span>&gt;</span>$&#123;assembly.outputDirectory&#125;<span class="tag">&lt;/<span class="name">targetDir</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">targetJar</span>&gt;</span>$&#123;finalName&#125;-encrypted.jar<span class="tag">&lt;/<span class="name">targetJar</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在执行JAR包时，需要在启动命令中加入<code>--xjar.password=7nBHK8bKB6</code>命令进行解密，否则JAR包将不能正常启动。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在某些情况下可能会需要将&lt;code&gt;JAR&lt;/code&gt;包提供给第三方使用，但又不想泄露源码，可以对架包进行加密处理。可以使用&lt;code&gt;xjar-maven-plugin&lt;/code&gt;插件对生成得&lt;code&gt;JAR&lt;/code&gt;进行加密，&lt;code&gt;Maven&lt;/code
      
    
    </summary>
    
      <category term="Maven" scheme="https://yaoyinglong.github.io/categories/Maven/"/>
    
    
      <category term="Maven" scheme="https://yaoyinglong.github.io/tags/Maven/"/>
    
      <category term="加密" scheme="https://yaoyinglong.github.io/tags/%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
</feed>
